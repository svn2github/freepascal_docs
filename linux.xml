<?xml version="1.0" encoding="ISO8859-1"?>
<!--  

   $Id: linux.xml,v 1.1 2004/10/22 20:45:36 michael Exp $ 
   This file is part of the FPC documentation. 
   Copyright (C) 1997, by Michael Van Canneyt 
 
   The FPC documentation is free text; you can redistribute it and/or 
   modify it under the terms of the GNU Library General Public License as 
   published by the Free Software Foundation; either version 2 of the 
   License, or (at your option) any later version. 
 
   The FPC Documentation is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty of 
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
   Library General Public License for more details. 
 
   You should have received a copy of the GNU Library General Public 
   License along with the FPC documentation; see the file COPYING.LIB.  If not, 
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, 
   Boston, MA 02111-1307, USA. 
 -->
<fpdoc-descriptions>
<package name="rtl">
<module name="Linux">
<short>Linux-specific operating system calls.</short>
<descr>
<p>
The <file>linux</file> unit contains linux specific operating system calls.
</p>
<p>
The platform independent functionality of the FPC 1.0.X version of the 
<file>linux</file> unit has been split out over the 
<link id="#rtl.unix">unix</link>, <link id="#rtl.baseunix">baseunix</link> and
<link id="#rtl.unixutil">unixutil</link> units.
</p>
<p>
The X86-specific parts have been moved to the <link id="#rtl.x86">X86</link>
unit.
</p>
<p>
People wanting to use the old version (FPC 1.0.X and before) of the
<file>linux</file> can use the <link id="#rtl.oldlinux">oldlinux</link> unit
instead.
</p>
</descr>

<!-- record type Visibility: default -->
<element name="TSysinfo">
<short>Record with system information, used by the <link id="SysInfo"/> call.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.uptime">
<short>Number of seconds since boot.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.loads">
<short>1, 5 and 15 minute load averages.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.totalram">
<short>total amount of main memory.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.freeram">
<short>amount of free memory.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.sharedram">
<short>amount of shared memory.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.bufferram">
<short>amount of memory used by buffers.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.totalswap">
<short>total amount of swapspace.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.freeswap">
<short>amount of free swapspace.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.procs">
<short>number of current processes.</short>
</element>

<!-- variable Visibility: default -->
<element name="TSysinfo.s">
<short>?</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PSysInfo">
<short>Pointer to <link id="TSysInfo"/> record.</short>
</element>

<!-- function Visibility: default -->
<element name="Sysinfo">
<short>Return kernel system information</short>
<descr>
<p>
<var>SysInfo</var> returns system information in <var>Info</var>. Returned information
in <var>Info</var> includes:
</p>
<dl>
<dt>uptime</dt><dd>Number of seconds since boot.</dd>
<dt>loads</dt><dd>1, 5 and 15 minute load averages.</dd>
<dt>totalram</dt><dd>total amount of main memory.</dd>
<dt>freeram</dt><dd>amount of free memory.</dd>
<dt>sharedram</dt><dd>amount of shared memory.</dd>
<dt>bufferram</dt><dd>amount of memory used by buffers.</dd>
<dt>totalswap</dt><dd>total amount of swapspace.</dd>
<dt>freeswap</dt><dd>amount of free swapspace.</dd>
<dt>procs</dt><dd>number of current processes.</dd>
</dl>
</descr>
<errors>
None.
</errors>
<seealso>
<link id="#rtl.baseunix.fpUname"/>
</seealso>
<example file="linuxex/ex64"/>
</element>

<!-- constant Visibility: default -->
<element name="CSIGNAL">
<short><link id="Clone"/> option: Signal mask to be sent at exit</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_VM">
<short><link id="Clone"/> option: VM shared between processes</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_FS">
<short><link id="Clone"/> option: fs info shared between processes</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_FILES">
<short><link id="Clone"/> option: open files shared between processes</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_SIGHAND">
<short><link id="Clone"/> option: signal handlers shared between processes</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_PID">
<short><link id="Clone"/> option: PID shared between processes</short>
</element>

<!-- function type Visibility: default -->
<element name="TCloneFunc">
<short>Clone function prototype.</short>
</element>

<!-- function Visibility: default -->
<element name="Clone">
<short>Clone current process (create new thread)</short>
<descr>
<p>
<var>Clone</var>
creates a child process which is a copy of the parent process, just
like <link id="#rtl.baseunix.FpFork">FpFork</link> does. In difference with <var>Fork</var>, however, the child
process shares some parts of it's execution context with its parent, so it
is suitable for the implementation of threads: many instances of a program
that share the same memory.
</p>
<p>
When the child process is created, it starts executing the function
<var>Func</var>, and passes it <var>Args</var>. The return value of <var>Func</var> is 
either the explicit return value of the function, or the exit code of
the child process.
</p>
<p>
The <var>sp</var> pointer points to the memory reserved as stack space for the
child process. This address should be the top of the memory block to be used
as stack.
</p>
<p>
The <var>Flags</var> determine the behaviour of the <var>Clone</var> call. The low
byte of the Flags contains the number of the signal that will be  sent to 
the parent when  the child dies. 
This may be bitwise OR'ed with the following constants:
</p>
<dl>
<dt>CLONE_VM</dt>
<dd> Parent and child share the same memory space, including
memory (un)mapped with subsequent <var>mmap</var> calls.</dd>
<dt>CLONE_FS</dt>
<dd> Parent and child have the same view of the filesystem;
the <var>chroot</var>, <var>chdir</var> and <var>umask</var> calls affect both processes.</dd>
<dt>CLONE_FILES</dt>
<dd> the file descriptor table of parent and child is shared.</dd>
<dt>CLONE_SIGHAND</dt>
<dd> the parent and child share the same table of signal
handlers. The signal masks are different, though.</dd>
<dt>CLONE_PID</dt>
<dd> PArent and child have the same process ID.</dd>
</dl>
<p>
Clone returns the process ID in the parent process, and -1 if an error
occurred.
</p>
</descr>
<errors>
<p>
On error, -1 is returned to the parent, and no child is created.
</p>
<dl>
<dt>sys_eagain</dt><dd>Too many processes are running.</dd>
<dt>sys_enomem</dt><dd>Not enough memory to create child process.</dd>
</dl>
</errors>
<seealso>
<link id="#rtl.baseunix.FpFork"/>
</seealso>
<example file="linuxex/ex71"/>
</element>

<!-- unresolved type reference Visibility: default -->
<element name="ctypes">
<short>Support for some basic C types</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLIN">
<short>Poll input file descriptor ready event</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLOUT">
<short>Poll output file descriptor ready event</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLPRI">
<short>Priority data available on input file descriptor</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLERR">
<short>Poll error condition</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLHUP">
<short>Poll hung up</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLLET">
<short>Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLL_CTL_ADD">
<short>Add filedescriptor to list of events</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLL_CTL_MOD">
<short>Modify event for filedescriptor</short>
</element>

<!-- constant Visibility: default -->
<element name="EPOLL_CTL_DEL">
<short>Delete event for filedescriptor</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_FONT">
<short>IOCTL: Get font in expanded form.</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_FONT">
<short>IOCTL: Use font in expanded form.</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_FONTX">
<short>IOCTL: Get font in <var>consolefontdesc</var> record.</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_FONTX">
<short>IOCTL: Set font in <var>consolefontdesc</var> record.</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_FONTRESET">
<short>IOCTL: Reset to default font</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_CMAP">
<short>IOCTL: Get colour palette on VGA+</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_CMAP">
<short>IOCTL: Set colour palette on VGA+</short>
</element>

<!-- constant Visibility: default -->
<element name="KIOCSOUND">
<short>IOCTL: start/stop sound generation (0 for off)</short>
</element>

<!-- constant Visibility: default -->
<element name="KDMKTONE">
<short>IOCTL: generate tone</short>
</element>

<!-- constant Visibility: default -->
<element name="KDGETLED">
<short>IOCTL: return current led state</short>
</element>

<!-- constant Visibility: default -->
<element name="KDSETLED">
<short>IOCTL: set led state</short>
</element>

<!-- constant Visibility: default -->
<element name="KDGKBTYPE">
<short>IOCTL: get keyboard type</short>
</element>

<!-- constant Visibility: default -->
<element name="KDADDIO">
<short>IOCTL: add i/o port as valid</short>
</element>

<!-- constant Visibility: default -->
<element name="KDDELIO">
<short>IOCTL: delete i/o port as valid</short>
</element>

<!-- constant Visibility: default -->
<element name="KDENABIO">
<short>IOCTL: enable i/o to video board</short>
</element>

<!-- constant Visibility: default -->
<element name="KDDISABIO">
<short>IOCTL: disable i/o to video board</short>
</element>

<!-- constant Visibility: default -->
<element name="KDSETMODE">
<short>IOCTL: set text/graphics mode</short>
</element>

<!-- constant Visibility: default -->
<element name="KDGETMODE">
<short>IOCTL: get current mode</short>
</element>

<!-- constant Visibility: default -->
<element name="KDMAPDISP">
<short>IOCTL: map display into address space</short>
</element>

<!-- constant Visibility: default -->
<element name="KDUNMAPDISP">
<short>IOCTL: unmap display from address space</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_SCRNMAP">
<short>IOCTL: get screen mapping from kernel</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_SCRNMAP">
<short>IOCTL: put screen mapping table in kernel</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_UNISCRNMAP">
<short>IOCTL: get full Unicode screen mapping</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_UNISCRNMAP">
<short>IOCTL: set full Unicode screen mapping</short>
</element>

<!-- constant Visibility: default -->
<element name="GIO_UNIMAP">
<short>IOCTL: get unicode-to-font mapping from kernel</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_UNIMAP">
<short>IOCTL: put unicode-to-font mapping in kernel</short>
</element>

<!-- constant Visibility: default -->
<element name="PIO_UNIMAPCLR">
<short>IOCTL: clear table, possibly advise hash algorithm</short>
</element>

<!-- constant Visibility: default -->
<element name="KDGKBDIACR">
<short>IOCTL: read kernel accent table</short>
</element>

<!-- constant Visibility: default -->
<element name="KDSKBDIACR">
<short>IOCTL: write kernel accent table</short>
</element>

<!-- constant Visibility: default -->
<element name="KDGETKEYCODE">
<short>IOCTL: read kernel keycode table entry</short>
</element>

<!-- constant Visibility: default -->
<element name="KDSETKEYCODE">
<short>IOCTL: write kernel keycode table entry</short>
</element>

<!-- constant Visibility: default -->
<element name="KDSIGACCEPT">
<short>IOCTL: accept kbd generated signals</short>
</element>

<!-- constant Visibility: default -->
<element name="KDFONTOP">
<short>IOCTL: font operations</short>
</element>

<!-- constant Visibility: default -->
<element name="KB_84">
<short>IOCTL: Keyboard types: 84 keys</short>
</element>

<!-- constant Visibility: default -->
<element name="KB_101">
<short>IOCTL: Keyboard types: 101 keys</short>
</element>

<!-- constant Visibility: default -->
<element name="KB_OTHER">
<short>IOCTL: Keyboard types: other type</short>
</element>

<!-- constant Visibility: default -->
<element name="LED_SCR">
<short>IOCTL: LED_SCR : scroll lock led</short>
</element>

<!-- constant Visibility: default -->
<element name="LED_NUM">
<short>IOCTL: LED_SCR : Num lock led</short>
</element>

<!-- constant Visibility: default -->
<element name="LED_CAP">
<short>IOCTL: LED_CAP : caps lock led</short>
</element>

<!-- constant Visibility: default -->
<element name="KD_TEXT">
<short>IOCTL: Tty modes: Text mode</short>
</element>

<!-- constant Visibility: default -->
<element name="KD_GRAPHICS">
<short>IOCTL: Tty modes: graphics mode </short>
</element>

<!-- constant Visibility: default -->
<element name="KD_TEXT0">
<short>IOCTL: Tty modes: Text mode (obsolete)</short>
</element>

<!-- constant Visibility: default -->
<element name="KD_TEXT1">
<short>IOCTL: Tty modes: Text mode (obsolete)</short>
</element>

<!-- record type Visibility: default -->
<element name="EPoll_Data">
<short>Epoll data call structure</short>
<descr>
Data structure used in EPOLL IOCTL call.
</descr>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Data.ptr">
<short>Pointer to data</short>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Data.fd">
<short>File descriptor</short>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Data.u32">
<short>Unsigned 32-bit integer</short>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Data.u64">
<short>Unsigned 64-bit integer</short>
</element>

<!-- alias type Visibility: default -->
<element name="TEPoll_Data">
<short>Alias for <link id="#rtl.linux.EPoll_Data">EPoll_Data</link> type</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PEPoll_Data">
<short>Pointer to <link id="#rtl.linux.EPoll_Data">EPoll_Data</link> record</short>
</element>

<!-- record type Visibility: default -->
<element name="EPoll_Event">
<short>Structure used in <link id="#rtl.linux.epoll_ctl">epoll_ctl</link> call.</short>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Event.Events">
<short>Events to monitor</short>
</element>

<!-- variable Visibility: default -->
<element name="EPoll_Event.Data">
<short>User data </short>
</element>

<!-- alias type Visibility: default -->
<element name="TEPoll_Event">
<short>Alias for <link id="#rtl.linux.EPoll_Event">EPoll_Event</link> type</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PEpoll_Event">
<short>Pointer to <link id="#rtl.linux.EPoll_Event">EPoll_Event</link> type</short>
</element>

<!-- function Visibility: default -->
<element name="epoll_create">
<short>Create new epoll file descriptor</short>
<descr>
<p>
<var>epoll_create</var> creates a new epoll file descriptor. The <var>size</var>
argument indicates to the kernel approximately how many structures should be allocated,
but is by no means an upper limit.
</p>
<p>
On success, a file descriptor is returned that can be used in subsequent 
<link id="epoll_ctl"/> or <link id="epoll_wait"/> calls, and should be closed
using the <link id="#rtl.baseunix.fpClose">fpClose</link> call. 
</p>
</descr>
<errors>
On error, -1 is returned, and <link id="#rtl.baseunix.errno">errno</link> is set. 
</errors>
<seealso>
<link id="epoll_ctl"/>
<link id="epoll_wait"/>
<link id="#rtl.baseunix.fpClose">fpClose</link>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="epoll_ctl">
<short>Modify an epoll file descriptor</short>
<descr>
<p>
<var>epoll_ctl</var> performs the <var>op</var> operation on epoll file descriptor
<var>epfd</var>. The operation will be monitored on file descriptor <var>fd</var>, and is
optionally controlled by <var>event</var>.
</p>
<p>
<var>op</var> can be one of the following values:
</p>
<dl>
<dt>EPOLL_CTL_ADD</dt><dd><printshort id="EPOLL_CTL_ADD"/></dd>
<dt>EPOLL_CTL_MOD</dt><dd><printshort id="EPOLL_CTL_MOD"/></dd>
<dt>EPOLL_CTL_DEL</dt><dd><printshort id="EPOLL_CTL_DEL"/></dd>
</dl>
<p>
The <var>events</var> field in  <var>event_data</var> is a bitmask of one or more of the following values:</p>
<dl>
<dt>EPOLLIN</dt><dd>The file is ready for read operations</dd>
<dt>EPOLLOUT</dt><dd>The file is ready for write operations.</dd>
<dt>EPOLLPRI</dt><dd>Urgent data is available for read operations.</dd>
<dt>EPOLLERR</dt><dd>An error condition is signaled on the file descriptor.</dd>
<dt>EPOLLHUP</dt><dd>A Hang up happened on the file descriptor.</dd>
<dt>EPOLLET</dt><dd>Set the Edge Triggered behaviour for the file descriptor.</dd>
<dt>EPOLLONESHOT</dt><dd>Set One-Shot behaviour for the file descriptor. The event will be triggered only once.</dd>
</dl>
</descr>
<errors>
On error -1 is returned, and errno is set accordingly.
</errors>
<seealso>
<link id="epoll_create"/>
<link id="epoll_wait"/>
<link id="#rtl.baseunix.fpClose">fpClose</link>
</seealso>
</element>

<element name="epoll_wait">
<short>Wait for an event on an epoll file descriptor.</short>
<descr>
<p>
<var>epoll_wait</var> waits for <var>timeout</var> milliseconds for an event to occur on epoll file descriptor <var>epfd</var>. If <var>timeout</var> is -1, it waits indefinitely, if <var>timeour</var> is zero, it does not wait, but returns immediatly, even if no events were detected.
</p>
<p>On return, data for at most <var>maxevents</var> will be returned in the memory pointed to by <var>events</var>. The function returns the number of file descriptors for which
events were reported. This can be zero if the timeout was reached.</p>
</descr>
<errors>
On error -1 is returned, and errno is set accordingly.
</errors>
<seealso>
<link id="epoll_create"/>
<link id="epoll_ctl"/>
<link id="#rtl.baseunix.fpClose">fpClose</link>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_PTRACE">
<short>Clone options: if parent is traced, trace child also</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_VFORK">
<short>Clone options: suspend parent till child execs</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_PARENT">
<short>Clone options: Set child parent to parent of calling process.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_THREAD">
<short>Clone options: Set child in thread group of calling process. </short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_NEWNS">
<short>Clone options: Start child in new (filesystem) namespace.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_SYSVSEM">
<short>Clone option: Caller and child share the same semaphore undo values</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_SETTLS">
<short>Clone option: The newtls parameter is the TLS descriptor of the child</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_PARENT_SETTID">
<short>Clone option: Store child thread ID in memory in both parent and child.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_CHILD_CLEARTID">
<short>Clone option: Erase child thread ID in child memory space when child exits. </short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_DETACHED">
<short>Clone option: Start clone detached.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_UNTRACED">
<short>Clone option: Do not allow a ptrace call on this clone.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_CHILD_SETTID">
<short>Clone option: Store child thread ID in child memory.</short>
</element>

<!-- constant Visibility: default -->
<element name="CLONE_STOPPED">
<short>Clone option: Start child in stopped state.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_WAIT">
<short>Futex option: Wait on futex till wake call arrives.</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_WAKE">
<short>Futex option: wakes any waiting processes on this futex</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_FD">
<short>Futex option: Associate file descriptor with futex.</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_REQUEUE">
<short>Futex option: requeue waiting processes on other futex. </short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_CMP_REQUEUE">
<short>Futex option: requeue waiting processes on other futex, but check it's value first</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_WAKE_OP">
<short>Futex option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_LOCK_PI">
<short>Futex option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_UNLOCK_PI">
<short>Futex option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_TRYLOCK_PI">
<short>Futex option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_SET">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_ADD">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_OR">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_ANDN">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_XOR">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_OPARG_SHIFT">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_EQ">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_NE">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_LT">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_LE">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_GT">
<short>Futex operation: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="FUTEX_OP_CMP_GE">
<short>Futex operation: Undocumented</short>
</element>

<!-- function Visibility: default -->
<element name="FUTEX_OP">
<short>Futex operation:</short>
<descr>
<p>
<var>FUTEX_OP</var> Performs an operation on a futex:
</p>
<pre>
FUTEX_OP := ((op and $F) shl 28) or  
            ((cmp and $F) shl 24) or 
            ((oparg and $FFF) shl 12) 
            or (cmparg and $FFF);
</pre>
</descr>
</element>

<!-- constant Visibility: default -->
<element name="MODIFY_LDT_CONTENTS_DATA">
<short>Modify_ldt option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="MODIFY_LDT_CONTENTS_STACK">
<short>Modify_ldt option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="MODIFY_LDT_CONTENTS_CODE">
<short>Modify_ldt option: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_SEG_32BIT">
<short>TLS segment descriptor : Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_CONTENTS_DATA">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_CONTENTS_STACK">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_CONTENTS_CODE">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_READ_EXEC_ONLY">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_LIMIT_IN_PAGES">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_SEG_NOT_PRESENT">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_USEABLE">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- constant Visibility: default -->
<element name="UD_LM">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- record type Visibility: default -->
<element name="user_desc">
<short>TLS segment descriptor</short>
<descr>
<var>user_desc</var> is the TLS (Thread Local Storage) segment descriptor
used in the <var>Clone</var> call. It should not be used, as it contains
highly kernel-specific data.
</descr>
</element>

<!-- variable Visibility: default -->
<element name="user_desc.entry_number">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- variable Visibility: default -->
<element name="user_desc.base_addr">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- variable Visibility: default -->
<element name="user_desc.limit">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- variable Visibility: default -->
<element name="user_desc.flags">
<short>TLS segment descriptor: Undocumented</short>
</element>

<!-- alias type Visibility: default -->
<element name="TUser_Desc">
<short>Alias for <var>user_desc</var> record</short>
<descr>
<var>TUser_Desc</var> is an alias for the <link id="user_desc"/> type.
</descr>
</element>

<!-- pointer type Visibility: default -->
<element name="PUser_Desc">
<short>Pointer to <var>User_Desc</var> record</short>
<descr>
<var>PUser_Desc</var> is a pointer to the <link id="user_desc"/> type.
</descr>
</element>


</module> <!-- Linux -->
</package>
</fpdoc-descriptions>
